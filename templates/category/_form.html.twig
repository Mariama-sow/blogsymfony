{{ form_start(form) }}

<div style="display: grid; gap: 25px;">
    {# Nom de la catégorie #}
    <div class="form-group">
        <label class="form-label" for="{{ form.name.vars.id }}">
            <i class="fas fa-tag"></i>
            {{ form_label(form.name) }}
        </label>
        {{ form_widget(form.name, {
            'attr': {
                'class': 'form-control',
                'placeholder': 'Ex: Technologie, Lifestyle, Voyage...'
            }
        }) }}
        {{ form_errors(form.name) }}
    </div>

    {# Description de la catégorie #}
    <div class="form-group">
        <label class="form-label" for="{{ form.description.vars.id }}">
            <i class="fas fa-file-text"></i>
            {{ form_label(form.description) }}
        </label>
        {{ form_widget(form.description, {
            'attr': {
                'class': 'form-control',
                'placeholder': 'Décrivez brièvement cette catégorie...',
                'rows': 4,
                'style': 'resize: vertical; min-height: 100px;'
            }
        }) }}
        {{ form_errors(form.description) }}
    </div>

    {# Autres champs du formulaire s'il y en a #}
    {% for child in form.children %}
        {% if child.vars.name not in ['name', 'description'] %}
            <div class="form-group">
                {{ form_label(child, null, {'label_attr': {'class': 'form-label'}}) }}
                {{ form_widget(child, {'attr': {'class': 'form-control'}}) }}
                {{ form_errors(child) }}
            </div>
        {% endif %}
    {% endfor %}

    {# Bouton de soumission #}
    <div style="display: flex; gap: 15px; flex-wrap: wrap; margin-top: 20px;">
        <button type="submit" class="btn" style="background: linear-gradient(45deg, #56ab2f 0%, #a8e6cf 100%); flex: 1; min-width: 200px; justify-content: center;">
            <i class="fas fa-save"></i>
            {{ button_label|default('Enregistrer') }}
        </button>
        
        <a href="{{ path('app_category_index') }}" 
           class="btn" 
           style="background: rgba(255, 255, 255, 0.1); border: 1px solid rgba(255, 255, 255, 0.2); flex: 1; min-width: 150px; justify-content: center; text-decoration: none;">
            <i class="fas fa-times"></i>
            Annuler
        </a>
    </div>
</div>

{{ form_end(form) }}

<style>
    /* Styles pour les erreurs de formulaire */
    .form-error {
        color: #ff6b6b;
        font-size: 0.9rem;
        margin-top: 5px;
        display: block;
    }

    /* Animation pour les champs avec erreur */
    .form-control.is-invalid,
    .form-control:invalid {
        border-color: #ff6b6b;
        box-shadow: 0 0 10px rgba(255, 107, 107, 0.3);
        animation: shake 0.5s ease-in-out;
    }

    @keyframes shake {
        0%, 100% { transform: translateX(0); }
        25% { transform: translateX(-5px); }
        75% { transform: translateX(5px); }
    }

    /* Amélioration du textarea */
    textarea.form-control {
        font-family: inherit;
        line-height: 1.5;
    }

    /* Focus states améliorés */
    .form-control:focus {
        transform: translateY(-2px);
        transition: transform 0.2s ease;
    }

    /* Styles des boutons */
    .btn {
        padding: 12px 24px;
        border: none;
        border-radius: 8px;
        color: white;
        font-weight: 600;
        cursor: pointer;
        display: flex;
        align-items: center;
        gap: 8px;
        transition: all 0.3s ease;
        text-decoration: none;
    }

    .btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    }

    .btn:active {
        transform: translateY(0);
    }

    /* États de chargement du bouton */
    .btn.loading {
        position: relative;
        color: transparent;
    }

    .btn.loading::after {
        content: '';
        position: absolute;
        width: 16px;
        height: 16px;
        top: 50%;
        left: 50%;
        margin-left: -8px;
        margin-top: -8px;
        border: 2px solid transparent;
        border-top-color: #ffffff;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    /* Responsive pour les boutons */
    @media (max-width: 768px) {
        .btn {
            flex: none !important;
            width: 100%;
        }
    }

    /* Styles pour les labels */
    .form-label {
        font-weight: 600;
        margin-bottom: 8px;
        display: flex;
        align-items: center;
        gap: 8px;
        color: #333;
    }

    /* Styles pour les champs de formulaire */
    .form-control {
        padding: 12px 16px;
        border: 2px solid #e1e5e9;
        border-radius: 8px;
        font-size: 16px;
        transition: all 0.3s ease;
        background-color: #fff;
    }

    .form-control:focus {
        outline: none;
        border-color: #56ab2f;
        box-shadow: 0 0 0 3px rgba(86, 171, 47, 0.1);
    }

    /* Animation d'apparition */
    .form-group {
        animation: fadeInUp 0.6s ease forwards;
        opacity: 0;
        transform: translateY(20px);
    }

    .form-group:nth-child(1) { animation-delay: 0.1s; }
    .form-group:nth-child(2) { animation-delay: 0.2s; }
    .form-group:nth-child(3) { animation-delay: 0.3s; }

    @keyframes fadeInUp {
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Validation en temps réel
        const form = document.querySelector('form');
        const inputs = form.querySelectorAll('.form-control');
        
        inputs.forEach(input => {
            input.addEventListener('blur', function() {
                if (this.hasAttribute('required') && !this.value.trim()) {
                    this.classList.add('is-invalid');
                } else {
                    this.classList.remove('is-invalid');
                }
            });
            
            input.addEventListener('input', function() {
                if (this.classList.contains('is-invalid') && this.value.trim()) {
                    this.classList.remove('is-invalid');
                }
            });
        });

        // Animation du bouton de soumission
        const submitBtn = form.querySelector('button[type="submit"]');
        form.addEventListener('submit', function(e) {
            // Empêcher la double soumission
            if (submitBtn.classList.contains('loading')) {
                e.preventDefault();
                return false;
            }

            // Validation finale avant soumission
            let hasErrors = false;
            inputs.forEach(input => {
                if (input.hasAttribute('required') && !input.value.trim()) {
                    input.classList.add('is-invalid');
                    hasErrors = true;
                }
            });

            if (hasErrors) {
                e.preventDefault();
                // Scroll vers le premier champ avec erreur
                const firstError = form.querySelector('.is-invalid');
                if (firstError) {
                    firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
                    firstError.focus();
                }
                return false;
            }

            // Animation de chargement
            submitBtn.classList.add('loading');
            submitBtn.disabled = true;
            
            // Si c'est une soumission AJAX, vous pouvez annuler le comportement par défaut
            // e.preventDefault();
        });

        // Gestion des raccourcis clavier
        document.addEventListener('keydown', function(e) {
            // Ctrl/Cmd + S pour sauvegarder
            if ((e.ctrlKey || e.metaKey) && e.key === 's') {
                e.preventDefault();
                form.dispatchEvent(new Event('submit'));
            }
            
            // Échap pour annuler
            if (e.key === 'Escape') {
                const cancelBtn = document.querySelector('a[href*="app_category_index"]');
                if (cancelBtn && confirm('Êtes-vous sûr de vouloir annuler ? Les modifications non sauvegardées seront perdues.')) {
                    window.location.href = cancelBtn.href;
                }
            }
        });

        // Auto-resize pour le textarea
        const textarea = form.querySelector('textarea');
        if (textarea) {
            textarea.addEventListener('input', function() {
                this.style.height = 'auto';
                this.style.height = Math.max(100, this.scrollHeight) + 'px';
            });
        }

        // Indication de modifications non sauvegardées
        let formModified = false;
        inputs.forEach(input => {
            const initialValue = input.value;
            input.addEventListener('input', function() {
                formModified = (this.value !== initialValue);
                updateFormState();
            });
        });

        function updateFormState() {
            if (formModified) {
                document.title = '• ' + document.title.replace('• ', '');
            } else {
                document.title = document.title.replace('• ', '');
            }
        }

        // Avertissement avant de quitter la page
        window.addEventListener('beforeunload', function(e) {
            if (formModified) {
                e.preventDefault();
                e.returnValue = 'Vous avez des modifications non sauvegardées. Êtes-vous sûr de vouloir quitter ?';
                return e.returnValue;
            }
        });

        // Marquer le formulaire comme non modifié après soumission réussie
        form.addEventListener('submit', function() {
            formModified = false;
        });
    });
</script>
